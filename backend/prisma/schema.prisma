generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id              Int             @id @default(autoincrement())
  role            Role            
  name            String
  lastName        String
  businessName    String?         @unique
  email           String          @unique
  dateOfBirth     DateTime?
  password        String          @db.VarChar(255)
  billingAddress  String
  shippingAddress String?
  shippingInfo    String
  wishlists       Wishlist[]
  items           Item[]
  orders          Order[]
  reviews         Review[]
  articles        Article[]
  comments        Comment[]
  adress         Adress[]
  favoriteItem    FavouriteItem[]
}

enum Role {
  USER
  CRAFTER
  ADMIN
}

model Article {
  id          Int       @id @default(autoincrement())
  status      Boolean?  @default(false)
  title       String
  description String
  coverImage  String
  likes       Int
  userId      Int
  user        User      @relation(fields: [userId], references: [id])
  images      Image[]
  comments    Comment[]
}

model Tag {
  id     Int    @id @default(autoincrement())
  tag    String
  itemId Int
  item   Item   @relation(fields: [itemId], references: [id])
}

model Image {
  id        Int     @id @default(autoincrement())
  url       String
  reviewId  Int
  review    Review  @relation(fields: [reviewId], references: [id])
  itemId    Int
  item      Item    @relation(fields: [itemId], references: [id])
  articleId Int
  article   Article @relation(fields: [articleId], references: [id])
}

model Review {
  id          Int      @id @default(autoincrement())
  date        DateTime
  rating      Int
  description String
  images      Image[]
  userId      Int
  itemId      Int
  user        User     @relation(fields: [userId], references: [id])
  item        Item     @relation(fields: [itemId], references: [id])
}

model Order {
  id                  Int     @id @default(autoincrement())
  dateOfDelivery      String
  trackingNumber      String
  deliveredProcessing Boolean
  userId              Int
  items               Item[]
  user                User    @relation(fields: [userId], references: [id])
}

model Item {
  id           Int             @id @default(autoincrement())
  name         String
  materials    Material[]
  description  String
  price        Int
  images       Image[]
  tags         Tag[]
  reviewId     Int
  userId       Int
  user         User            @relation(fields: [userId], references: [id])
  wishList     Wishlist[]
  comments     Comment[]
  reviews      Review[]
  orderId      Int
  order        Order           @relation(fields: [orderId], references: [id])
  favoriteItem FavouriteItem[]
}

model Material {
  id           Int    @id @default(autoincrement())
  materialUsed String
  itemId       Int
  items        Item[]
}

model Comment {
  id        Int     @id @default(autoincrement())
  body      String
  userId    Int
  user      User    @relation(fields: [userId], references: [id])
  articleId Int
  itemId    Int
  article   Article @relation(fields: [articleId], references: [id])
  item      Item    @relation(fields: [itemId], references: [id])
}

model Wishlist {
  id         Int     @id @default(autoincrement())
  inWishlist Boolean
  inCart     Boolean
  userId     Int
  itemId     Int
  user       User    @relation(fields: [userId], references: [id])
  item       Item    @relation(fields: [itemId], references: [id])
}

model Adress {
  id         Int    @id @default(autoincrement())
  street     String
  city       String
  postalCode Int
  userId     Int
  user       User   @relation(fields: [userId], references: [id])
}

model FavouriteItem {
  id     Int  @id @default(autoincrement())
  userId Int
  itemId Int
  user   User @relation(fields: [userId], references: [id])
  item   Item @relation(fields: [itemId], references: [id])
}

model Notification {
  id    Int    @id @default(autoincrement())
  Title Int
  Body  String
}
